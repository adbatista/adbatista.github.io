<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Dias]]></title>
  <link href="http://alessandrodias.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://alessandrodias.herokuapp.com/"/>
  <updated>2014-09-17T11:23:09-03:00</updated>
  <id>http://alessandrodias.herokuapp.com/</id>
  <author>
    <name><![CDATA[Alessandro Dias Batista]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[o parâmetro &amp; (Ampersand)]]></title>
    <link href="http://alessandrodias.herokuapp.com/blog/2014/01/25/parametro-and-ampersand/"/>
    <updated>2014-01-25T17:10:00-02:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2014/01/25/parametro-and-ampersand</id>
    <content type="html"><![CDATA[<p>Para que serve o &amp; antes de um parâmetro em Ruby?</p>

<p>O &amp; antes de algum parâmetro é utilizado basicamente de duas formas:</p>

<p>1 Na definição de um método:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">awesome_method</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 Antes da chamada de um método:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">awesome_method</span> <span class="o">&amp;</span><span class="n">parameter</span>
</span></code></pre></td></tr></table></div></figure>


<p>A primeira forma serve para deixar explícito que o seu método recebe um bloco.<br/>
Já a segunda forma funciona assim:<br/>
pega o parâmetro, chama o método <code>to_proc</code> e o passa como bloco, idependente de o método ter deixado o bloco explícito ou não. Então basta que o objeto passado responda a <code>to_proc</code>. Você ja deve ter visto parecido com isso:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@users</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="ss">:name</span>
</span></code></pre></td></tr></table></div></figure>


<p>E uma coisa que sempre quis saber é &ldquo;como um símbolo passado como parâmetro irá no exemplo acima irá retornar o nome de todos usuários?&rdquo;.<br/>
Pesquisei um pouco, <a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby#answer-1217114" target="_blank">e achei como isso é feito</a>
Símbolos implementam o <code>to_proc</code>, tá e dai, como funciona esse to_proc`?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Symbol</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>      <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>        <span class="n">obj</span><span class="o">.</span><span class="n">send</span> <span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainda um pouco confuso? Vamos destrinchar esse código então.
vamos chamar o <code>to_proc</code> para o símbolo <code>:name</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="n">send</span> <span class="ss">:name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>o <code>map</code> passa como parâmetro para o bloco um item da coleção, nesse caso um user, vamos adicioná-lo no código, e já que apenas um argumento é passado podemos remover o <code>*args</code> para simplificar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">send</span> <span class="ss">:name</span> <span class="c1"># =&gt; equivalente a user.name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais simples agora? O método <code>send</code> envia para o user a mensagem <code>:name</code>, porque na verdade em Ruby metódos não são chamados, são mensagens enviadas ao objeto.
o resultado final seria algo equivalente a isso:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@users</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">send</span> <span class="ss">:name</span> <span class="c1"># ou user.name</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Caso queira saber mais sobre o ampersand: <a href="http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/">Ruby ampersand parameter demystified</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[classes são objetos]]></title>
    <link href="http://alessandrodias.herokuapp.com/blog/2014/01/24/classes-sao-objetos/"/>
    <updated>2014-01-24T00:49:00-02:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2014/01/24/classes-sao-objetos</id>
    <content type="html"><![CDATA[<p>No último post falei sobre a construção de objetos em Ruby, nesse vamos falar sobre classes.<br/>
Uma caracteristica das classes é que elas também são objetos. Então você pode definir uma classe
da forma mais comum.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span> <span class="o">&lt;</span> <span class="no">SuperClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ou pode criar uma instância da classe <code>[Class](http://www.ruby-doc.org/core-2.1.0/Class.html)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MyClass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SuperClass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As duas abordagens são válidas, a primeira é apenas um <em>syntax sugar</em>.<br/>
Outra coisa interessante sobre classes é que <a href="http://nomedojogo.com/2009/12/24/classes-sao-modulos-no-ruby/" title="Classes são módulos no Ruby" target="_blank">elas também são módulos</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[construtores em ruby]]></title>
    <link href="http://alessandrodias.herokuapp.com/blog/2014/01/23/construtores-em-ruby/"/>
    <updated>2014-01-23T15:53:00-02:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2014/01/23/construtores-em-ruby</id>
    <content type="html"><![CDATA[<p>Você ja deve ter percebido que diferente do C#, Java e outras linguagens OO, em Ruby a criação de um novo objeto é feita pelo método <code>new</code>, mas como é feita a criação de um objeto em Ruby?
Primeiro faremos uma lista do que precisamos para para instanciar um novo objeto.</p>

<ol>
<li>Alocar espaço para um objeto vazio</li>
<li>Setar o estado inicial do objeto</li>
<li>Retornar a referência para o objeto alocado</li>
</ol>


<p>Após feita a lista vamos criar um objeto com um construtor personalizado com cada item da lista</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">custom_new</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
</span><span class='line'>    <span class="n">instance</span> <span class="o">=</span> <span class="n">allocate</span> <span class="c1"># Aloca espaço para um novo objeto vazio</span>
</span><span class='line'>    <span class="n">instance</span><span class="o">.</span><span class="n">custom_initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
</span><span class='line'>    <span class="n">instance</span> <span class="c1"># Retorna a referência do objeto</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">custom_initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span><span class="p">,</span> <span class="vi">@author</span> <span class="o">=</span> <span class="n">title</span><span class="p">,</span> <span class="n">author</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">custom_new</span><span class="p">(</span><span class="s1">&#39;Title&#39;</span><span class="p">,</span><span class="s1">&#39;Alessandro&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Book:0x00000003607978 @author=&quot;ale&quot;, @title=&quot;Title&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No caso acima criamos uma classe <code>Book</code> que possui um construtor personalizado, claro que poderíamos sobrescrever o método <code>new</code> e/ou <code>initialize</code>, mas fiz dessa forma apena para mostrar que é possivel fazer assim.</p>

<p>Caso queira saber sobre o método <code>allocate</code> aqui está a <a href="http://www.ruby-doc.org/core-2.1.0/Class.html#method-i-allocate">documentação</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cuidado ao chamar métodos da super classe]]></title>
    <link href="http://alessandrodias.herokuapp.com/blog/2014/01/20/cuidado-ao-usar-super-em-seus-metodos/"/>
    <updated>2014-01-20T19:59:00-02:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2014/01/20/cuidado-ao-usar-super-em-seus-metodos</id>
    <content type="html"><![CDATA[<p>Lendo um pouco sobre herança em Ruby descobri uma coisa interessante, ao usar o método <code>super</code> em algum método, pode ocorrer da erro caso o desenvolvedor não preste atenção. Quando você redefine um método e chama <code>super</code> sem parênteses e sem argumentos, o Ruby irá pegar os parâmetros passados para o método na subclasse passar de forma implícita para o método da superclasse, se os parâmetros do método na superclasse forem diferentes dos parâmetros no método redefinido irá resultar em erro.
Exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span> <span class="no">Child</span> <span class="o">&lt;</span> <span class="no">Dad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;alessandro&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">hi</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como resolver isso? Simples.
Caso o método da superclasse não receba parâmetros chame o método super com parênteses <code>super()</code>
Exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello &quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span> <span class="no">Child</span> <span class="o">&lt;</span> <span class="no">Dad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;alessandro&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">hi</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Hello</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">alessandro</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é o splat operator do ruby?]]></title>
    <link href="http://alessandrodias.herokuapp.com/blog/2013/09/15/o-que-e-o-splat-operator-do-ruby/"/>
    <updated>2013-09-15T13:25:00-03:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2013/09/15/o-que-e-o-splat-operator-do-ruby</id>
    <content type="html"><![CDATA[<p>Esses dias olhando código no GitHub vi um trecho como esse: <code>def example(*b)</code>
O que esse código faz não vem ao caso, mas olhei o <code>*b</code> e pensei, oque que é esse * antes da variável me veio na hora ponteiro, mas ruby não possui ponteiros, então oque <code>*b</code> faz?
pesquisei sobre e resumindo é a sintaxe para splat operator em ruby, ex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">example</span><span class="p">(</span><span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">example</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span> <span class="c1"># =&gt; 1 2 3 4</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="n">example</span> <span class="o">*</span><span class="n">arr</span> <span class="c1"># =&gt; 5 6 7 8</span>
</span></code></pre></td></tr></table></div></figure>


<p>na ultima linha o <code>*arr</code> faz com que cada item do array seja passado como parâmetro para o método <code>example</code>, você pode usar dessa forma também.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">example2</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span><span class="n">v2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">v1</span><span class="p">,</span><span class="n">v2</span><span class="p">,</span><span class="n">v3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">example2</span> <span class="o">*</span><span class="n">arr</span> <span class="c1"># =&gt; 2 3 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nessa segunda abordagem você de ter cuidado para que a quantidade de elementos no array seja igual a quantidade de parâmetros requeridos pelo método.</p>

<p>Outra forma válida é o próximo exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">example3</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span><span class="o">*</span><span class="n">v2</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">v2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">example3</span> <span class="o">*</span><span class="n">arr</span> <span class="c1">#=&gt; 3 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nesse caso o primeiro valor da variavel <code>arr</code> é atribuido ao primeiro parâmetro e os demais ao parâmetro v2.</p>
]]></content>
  </entry>
  
</feed>
