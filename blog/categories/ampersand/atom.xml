<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ampersand | Alessandro Dias]]></title>
<<<<<<< HEAD
  <link href="http://alessandrodias.herokuapp.com/blog/categories/ampersand/atom.xml" rel="self"/>
  <link href="http://alessandrodias.herokuapp.com/"/>
  <updated>2014-09-17T11:23:09-03:00</updated>
  <id>http://alessandrodias.herokuapp.com/</id>
=======
  <link href="http://adbatista.github.io/blog/categories/ampersand/atom.xml" rel="self"/>
  <link href="http://adbatista.github.io/"/>
  <updated>2014-09-15T23:08:49-03:00</updated>
  <id>http://adbatista.github.io/</id>
>>>>>>> e5d67c88eecff74efb514767126aa960a1adcf54
  <author>
    <name><![CDATA[Alessandro Dias Batista]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[o parâmetro &amp; (Ampersand)]]></title>
<<<<<<< HEAD
    <link href="http://alessandrodias.herokuapp.com/blog/2014/01/25/parametro-and-ampersand/"/>
    <updated>2014-01-25T17:10:00-02:00</updated>
    <id>http://alessandrodias.herokuapp.com/blog/2014/01/25/parametro-and-ampersand</id>
=======
    <link href="http://adbatista.github.io/blog/2014/01/25/parametro-and-ampersand/"/>
    <updated>2014-01-25T17:10:00-02:00</updated>
    <id>http://adbatista.github.io/blog/2014/01/25/parametro-and-ampersand</id>
>>>>>>> e5d67c88eecff74efb514767126aa960a1adcf54
    <content type="html"><![CDATA[<p>Para que serve o &amp; antes de um parâmetro em Ruby?</p>

<p>O &amp; antes de algum parâmetro é utilizado basicamente de duas formas:</p>

<p>1 Na definição de um método:</p>

<p><code>ruby
def awesome_method &amp;block
  yield if block_given?
end
</code></p>

<p>2 Antes da chamada de um método:
<code>ruby
  awesome_method &amp;parameter
</code></p>

<p>A primeira forma serve para deixar explícito que o seu método recebe um bloco.<br/>
Já a segunda forma funciona assim:<br/>
pega o parâmetro, chama o método <code>to_proc</code> e o passa como bloco, idependente de o método ter deixado o bloco explícito ou não. Então basta que o objeto passado responda a <code>to_proc</code>. Você ja deve ter visto parecido com isso:</p>

<p><code>ruby
  @users.map &amp;:name
</code>
E uma coisa que sempre quis saber é &ldquo;como um símbolo passado como parâmetro irá no exemplo acima irá retornar o nome de todos usuários?&rdquo;.<br/>
Pesquisei um pouco, <a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby#answer-1217114" target="_blank">e achei como isso é feito</a>
Símbolos implementam o <code>to_proc</code>, tá e dai, como funciona esse to_proc`?</p>

<p>```ruby
  class Symbol</p>

<pre><code># ...
def to_proc
  Proc.new do |obj, *args|
    obj.send self, *args
  end
end
# ...
</code></pre>

<p><code>
Ainda um pouco confuso? Vamos destrinchar esse código então.
vamos chamar o `to_proc` para o símbolo `:name`
</code>ruby
  #&hellip;
  Proc.new do |obj, *args|</p>

<pre><code>obj.send :name, *args
</code></pre>

<p>  end
  #&hellip;
<code>``
o</code>map<code>passa como parâmetro para o bloco um item da coleção, nesse caso um user, vamos adicioná-lo no código, e já que apenas um argumento é passado podemos remover o</code>*args` para simplificar.</p>

<p>```ruby
  #&hellip;
  Proc.new do |user|</p>

<pre><code>user.send :name # =&gt; equivalente a user.name
</code></pre>

<p>  end
  #&hellip;
<code>
Mais simples agora? O método `send` envia para o user a mensagem `:name`, porque na verdade em Ruby metódos não são chamados, são mensagens enviadas ao objeto.
o resultado final seria algo equivalente a isso:
</code>ruby
  @users.map do |user|</p>

<pre><code>user.send :name # ou user.name
</code></pre>

<p>  end
```</p>

<p>Caso queira saber mais sobre o ampersand: <a href="http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/">Ruby ampersand parameter demystified</a></p>
]]></content>
  </entry>
  
</feed>
